[tool.poetry]
name = "cookiecutter-pypackage"
version = "1.1.1"
description = "Cookiecutter template for a Python package"
license = "BSD-3-Clause"
authors = ["Michael Kalashnikov <kalashnikovsystem@gmail.com>"]
readme = "README.md"
repository = "https://github.com/m-v-kalashnikov/cookiecutter-pypackage"
documentation = "https://m-v-kalashnikov.github.io/cookiecutter-pypackage/"
keywords = ['cookiecutter', 'template', 'package']
include = [
    { path = "utils" },
    { path = "hooks" },
    { path = "{{cookiecutter.project_slug}}" },
    { path = "cookiecutter.json" },
]


[tool.poetry.dependencies]
python = "^3.10"

cookiecutter = "^1.7.3"

[tool.poetry.dev-dependencies]
black = "*"
isort = "*"
mypy = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
pytest-cookies = "*"
coverage = "*"
pydocstyle = {version = "*", extras = ["toml"]}
tox = "*"
typer = {version = "*", extras = ["all"]}
mkdocs = "*"
mkdocs-autorefs = "*"
mkdocs-material = "*"
mkdocs-material-extensions = "*"
mkdocs-include-markdown-plugin = "*"
mkdocstrings = "*"



[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | {{cookiecutter.project_slug}}
)/
'''

[tool.isort]
profile = "black"
skip_glob = ["{{cookiecutter.project_slug}}/**/*"]

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = "88"

[tool.mypy]
strict = true
strict_equality = false
pretty = true
show_error_codes = true
ignore_missing_imports = true
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | {{cookiecutter.project_slug}}
)/
'''

[tool.pytest.ini_options]
console_output_style = "progress"

[tool.pydocstyle]
inherit = false
convention = "google"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py310, docs
skipsdist = true

[gh-actions]
python =
    3.10: py310, docs

[testenv:docs]
basepython=python
allowlist_externals = mkdocs
commands= poetry run mkdocs build

[testenv]
deps =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
commands = poetry run pytest --cov-report=term-missing tests
commands_pre = poetry update && poetry install
"""

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
